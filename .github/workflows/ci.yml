name: CI

on: [push, pull_request]

jobs:
  build:
    name: Build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Setup Node.js for use with Actions
        uses: actions/setup-node@v1
        with:
          node-version: '12.16.3'
      - name: Install Yarn
        run: curl -o- -L https://yarnpkg.com/install.sh | bash
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install
        env:
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
      - name: Compile TypeScript
        run: yarn run build
      - name: Upload compiled TypeScript
        uses: actions/upload-artifact@v1
        with:
          name: tsc_output
          path: tsc_output
  lint:
    name: Lint source

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Setup Node.js for use with Actions
        uses: actions/setup-node@v1
        with:
          node-version: '12.16.3'
      - name: Install Yarn
        run: curl -o- -L https://yarnpkg.com/install.sh | bash
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install
        env:
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
      - name: Lint with XO
        run: yarn run xo
  lint-dockerfile:
    name: Lint Dockerfile

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
          dockerfile: 'Dockerfile'

  style:
    name: Check style

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Setup Node.js for use with Actions
        uses: actions/setup-node@v1
        with:
          node-version: '12.16.3'
      - name: Install Yarn
        run: curl -o- -L https://yarnpkg.com/install.sh | bash
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install
        env:
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
      - name: Check style with Prettier
        run: yarn run style
  deploy:
    name: Deploy

    runs-on: ubuntu-latest

    needs: [build, lint, lint-dockerfile, style]

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Setup Node.js for use with Actions
        uses: actions/setup-node@v1
        with:
          node-version: '12.16.3'
      - name: Install Yarn
        run: curl -o- -L https://yarnpkg.com/install.sh | bash
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install
        env:
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
      - name: Build Docker image
        run: docker build -t dicediscord/bot .
      - name: Deploy
        run: yarn run deploy
        env:
          DOCKER_REGISTRY_USER: dicediscordbot
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
